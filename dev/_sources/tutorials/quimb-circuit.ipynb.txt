{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simulating Qiskit circuits with quimb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['00', '00', '11', '00', '11', '00', '11', '00', '11', '11']\n",
      "['11', '11', '00', '00', '11', '00', '11', '11', '11', '00']\n"
     ]
    }
   ],
   "source": [
    "import quimb.tensor\n",
    "from qiskit.circuit import QuantumCircuit, QuantumRegister\n",
    "\n",
    "from qiskit_quimb import quimb_circuit\n",
    "\n",
    "# Build a Qiskit circuit\n",
    "qubits = QuantumRegister(2)\n",
    "circuit = QuantumCircuit(qubits)\n",
    "a, b = qubits\n",
    "circuit.h(a)\n",
    "circuit.cx(a, b)\n",
    "\n",
    "# Convert it to a quimb circuit\n",
    "quimb_circ = quimb_circuit(circuit)\n",
    "\n",
    "# Sample 10 bitstrings\n",
    "samples = list(quimb_circ.sample(10, seed=1234))\n",
    "print(samples)\n",
    "\n",
    "# You can specify the quimb Circuit subclass and keyword arguments for the constructor\n",
    "quimb_circ = quimb_circuit(\n",
    "    circuit, quimb_circuit_class=quimb.tensor.CircuitMPS, max_bond=20\n",
    ")\n",
    "samples = list(quimb_circ.sample(10, seed=1234))\n",
    "print(samples)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "qiskit-quimb",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
